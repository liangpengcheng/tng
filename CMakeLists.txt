
PROJECT(BORG_TNG)

cmake_minimum_required(VERSION 2.8.9)

set(tng_os ${CMAKE_SYSTEM_NAME})
set(tng_arc unknown)
set(tng_compiler unknowncomp)
include (cmake/CompilerFlag.cmake)
include (cmake/TargetArch.cmake REQUIRED)
include (cmake/FindTCMalloc.cmake REQUIRED)
include (cmake/Compiler.cmake REQUIRED)
include(cmake/FindSSE.cmake REQUIRED)
include(cmake/FindC++0x.cmake REQUIRED)
include(cmake/FindJemalloc.cmake REQUIRED)
if(Jemalloc_FOUND)
include_directories(${Jemalloc_INCLUDE_DIR}/include/msvc_compat)
include_directories(${Jemalloc_INCLUDE_DIR}/include)
add_definitions(-DUSE_JEMALLOC=1)
endif()

if(MSVC)
add_definitions(-D_SCL_SECURE_NO_WARNINGS)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif(MSVC)
if(IOS)
	set(tng_arc arm)
	set(tng_compiler gcc)
endif()
if(ANDROID)
	include(cmake/Apk.cmake REQUIRED)
	add_definitions(-DANDROID=1)
	message(STATUS "Api level:" ${ANDROID_NATIVE_API_LEVEL})
endif()


find_package(Threads)
if(CMAKE_USE_PTHREADS_INIT)
	message(STATUS "find pthread" ${CMAKE_THREAD_LIBS_INIT})
endif()
# start math
if(HAS_SSE3_EXTENSIONS)
	add_definitions(-DMATH_SSE3=1)
	if  (NOT MSVC)
		add_definitions(-msse3)
	endif()
elseif(HAS_SSE2_EXTENSIONS)
if (MSVC)
	if (NOT MSVC11) # Visual Studio 2012 always has SSE2 enabled, so the command line option no longer exists.
		add_definitions(/arch:SSE2)
	endif()
	else()
		add_definitions(-msse3)
	endif()
	add_definitions(-DMATH_SSE2=1)
elseif(HAS_SSE_EXTENSIONS)
	add_definitions(-DMATH_SSE1=1)
endif()
#add_definitions(-DJEMALLOC_STATIC_BUILD=1)
add_definitions(-DMATH_USE_DIRECT3D=1)
add_definitions(-DMATH_RIGHTHANDED_CAMERA=1)
# end math

if(CXX11_FOUND)
message(STATUS "c++0x flag:" ${CXX11_FLAGS})
endif()

if(ANDROID OR IOS)
set(share_library 0)
else()
option(share_library "build share library engine." ON)
endif()
include (cmake/Until.cmake)

include_directories(dep)
include_directories(dep/gtest-1.6.0/include)
include_directories(dep/spine/include)


if (WIN32)
	include_directories(dep/win/include)
	if(CMAKE_CL_64)
		link_directories(${CMAKE_CURRENT_SOURCE_DIR}/dep/win/lib/X64)
	else()
		link_directories(${CMAKE_CURRENT_SOURCE_DIR}/dep/win/lib/X86)
	endif()
else()
	 if(EXISTS "/etc/issue")
	  file(READ "/etc/issue" LINUX_ISSUE)
	  set(LINUX_NAME "")
	  if(LINUX_ISSUE MATCHES "Red Hat")
        string(REGEX MATCH "release ([0-9]+\\.*[0-9]*)" REDHAT "${LINUX_ISSUE}")
        set(LINUX_NAME "RedHat")        
		set(LINUX_VER "${CMAKE_MATCH_1}")
      endif(LINUX_ISSUE MATCHES "Red Hat")

	  if(LINUX_ISSUE MATCHES "CentOS")
        string(REGEX MATCH "release ([0-9]+\\.[0-9]+)" CENTOS "${LINUX_ISSUE}")
        set(LINUX_NAME "CentOS")       
		set(LINUX_VER "${CMAKE_MATCH_1}") 
      endif(LINUX_ISSUE MATCHES "CentOS")
	  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/dep/unix/${LINUX_NAME})
	  message(STATUS "OperatorSystem:" ${CMAKE_CURRENT_SOURCE_DIR}/dep/unix/${LINUX_NAME})
	 endif()
	
endif()
#asset directorys
set(EngineAssetDir ${PROJECT_SOURCE_DIR}/EngineAsset)
if(ANDROID)
set(JavaSrcDir ${PROJECT_SOURCE_DIR}/codes/android/src)
endif()
set(SampleAssetDir ${PROJECT_SOURCE_DIR}/SampleAsset)
message(STATUS "asset paths:" ${EngineAssetDir} ${SampleAssetDir})

if(FLASCC)
include_directories(dep/flascc/include)
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/dep/flascc/lib)
endif()

message(STATUS "OperatorSystem:" ${tng_os})
message(STATUS "arch:" ${tng_arc})
message(STATUS "compiler:" ${tng_compiler})
if(NOT ANDROID)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_Debug_bin) 
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_Debug_bin) 
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_Debug_lib)


set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_Release_bin) 
set(CMAKE_LIBRARY_OUTPUT_DIRECTOR_RELEASE ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_Release_bin) 
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_Release_lib)


set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_RelWithDebInfo_bin) 
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_RelWithDebInfo_bin) 
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_RelWithDebInfo_lib)



set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_MinSizeRel_bin) 
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_MinSizeRel_bin) 
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${PROJECT_SOURCE_DIR}/${tng_os}_${tng_arc}_${tng_compiler}_MinSizeRel_lib)
endif()
option(dependencies "build dependencies lib project" ON)
option(build_unit_test "build unit test project." ON)
option(build_sample "build sample project." ON)
option(build_gles "build opengles render." ON)
if(NOT FLASCC AND NOT EMCC)
option(build_model_importer "build model importer." ON)
endif()
subdirs(dep)
include_directories(codes/include)
subdirs(codes)

#find_package(Protobuf)
#if(PROTOBUF_FOUND)
#include_directories ( ${PROTOBUF_INCLUDE_DIR} )
#message(STATUS "find PROTOBUF" ${PROTOBUF_LIBRARY})
